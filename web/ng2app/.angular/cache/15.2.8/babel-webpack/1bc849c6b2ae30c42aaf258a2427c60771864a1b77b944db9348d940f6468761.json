{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nexport class InputComponent {\n  constructor(changeDetector) {\n    this.changeDetector = changeDetector;\n  }\n  onInputValueChange(event) {\n    const targetDivElement = event.target;\n    const value = targetDivElement.value;\n    this.onChange(value);\n  }\n  writeValue(value) {\n    this.value = value;\n    this.changeDetector.detectChanges();\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n}\nInputComponent.ɵfac = function InputComponent_Factory(t) {\n  return new (t || InputComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nInputComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: InputComponent,\n  selectors: [[\"app-input\"]],\n  inputs: {\n    placeholder: \"placeholder\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputComponent),\n    multi: true\n  }])],\n  decls: 1,\n  vars: 2,\n  consts: [[\"type\", \"text\", 3, \"placeholder\", \"value\", \"input\"]],\n  template: function InputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"input\", 0);\n      i0.ɵɵlistener(\"input\", function InputComponent_Template_input_input_0_listener($event) {\n        return ctx.onInputValueChange($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"placeholder\", ctx.placeholder)(\"value\", ctx.value);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":"AAAA,SAAuEA,UAAU,QAAQ,eAAe;AACxG,SAA+BC,iBAAiB,QAAQ,gBAAgB;;AAsBxE,OAAM,MAAOC,cAAc;EAOzBC,YAA6BC,cAAiC;IAAjC,mBAAc,GAAdA,cAAc;EAAsB;EAEjEC,kBAAkB,CAACC,KAAY;IAC7B,MAAMC,gBAAgB,GAAGD,KAAK,CAACE,MAA0B;IACzD,MAAMC,KAAK,GAAGF,gBAAgB,CAACE,KAAK;IAEpC,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC;EACtB;EAEAE,UAAU,CAACF,KAAU;IACnB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACL,cAAc,CAACQ,aAAa,EAAE;EACrC;EAEAC,gBAAgB,CAACC,EAA2B;IAC1C,IAAI,CAACJ,QAAQ,GAAGI,EAAE;EACpB;EAEAC,iBAAiB,CAACD,EAAc;IAC9B,IAAI,CAACE,SAAS,GAAGF,EAAE;EACrB;;AA3BWZ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAe;EAAAC;IAAAC;EAAA;EAAAC,iCARd,CACT;IACEC,OAAO,EAAEpB,iBAAiB;IAC1BqB,WAAW,EAAEtB,UAAU,CAAC,MAAME,cAAc,CAAC;IAC7CqB,KAAK,EAAE;GACR,CACF;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MAfCC,gCAKC;MADCA;QAAA,OAASC,8BAA0B;MAAA,EAAC;MAJtCD,iBAKC;;;MAHCA,6CAA2B","names":["forwardRef","NG_VALUE_ACCESSOR","InputComponent","constructor","changeDetector","onInputValueChange","event","targetDivElement","target","value","onChange","writeValue","detectChanges","registerOnChange","fn","registerOnTouched","onTouched","selectors","inputs","placeholder","features","provide","useExisting","multi","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/home/dima/myProjects/heavyReviewBackEnd/web/ng2app/src/app/components/shared/input/input.component.ts"],"sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'app-input',\n  template: `\n    <input \n      type=\"text\"\n      [placeholder]=\"placeholder\"\n      [value]=\"value\"\n      (input)=\"onInputValueChange($event)\"\n    >\n  `,\n  styleUrls: ['./input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true\n    }\n  ]\n})\nexport class InputComponent implements ControlValueAccessor {\n  @Input() placeholder!: string;\n\n  public value: string | undefined;\n  private onChange!: (value: string) => void;\n  private onTouched!: () => void;\n\n  constructor(private readonly changeDetector: ChangeDetectorRef) {}\n\n  onInputValueChange(event: Event) {\n    const targetDivElement = event.target as HTMLInputElement;\n    const value = targetDivElement.value\n\n    this.onChange(value)\n  }\n\n  writeValue(value: any): void {\n    this.value = value\n    this.changeDetector.detectChanges()\n  }\n\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}