{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiPrefix = 'http://localhost:8000/';\n  }\n  get(url, params = null) {\n    url = this.apiPrefix + url;\n    if (params) {\n      const firstParamKey = Object.keys(params)[0];\n      const firstParamValue = Object.values(params)[0];\n      let copyParams = Object.assign({}, params);\n      url += '?' + firstParamKey + '=' + firstParamValue;\n      delete copyParams[firstParamKey];\n      if (Object.keys(params).length > 1) {\n        for (let [key, value] of Object.entries(copyParams)) {\n          url += '&' + key + '=' + value;\n        }\n      }\n    }\n    return new Observable(observer => {\n      this.http.get(url).subscribe(data => {\n        observer.next(data);\n        observer.complete();\n      }, error => {\n        console.error(error.status);\n      });\n    });\n  }\n  post(url, body) {\n    url = this.apiPrefix + url;\n    return new Observable(observer => {\n      this.http.post(url, body).subscribe(data => {\n        observer.next(data);\n        observer.complete();\n      }, error => {\n        console.log(error.status);\n      });\n    });\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,QAAQ,MAAM;;;AAKjC,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFjB,cAAS,GAAW,wBAAwB;EAEX;EAExCC,GAAG,CAACC,GAAW,EAAEC,SAAc,IAAI;IACjCD,GAAG,GAAG,IAAI,CAACE,SAAS,GAAGF,GAAG;IAE1B,IAAIC,MAAM,EAAE;MACV,MAAME,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC,CAAC,CAAC,CAAC;MAC5C,MAAMK,eAAe,GAAGF,MAAM,CAACG,MAAM,CAACN,MAAM,CAAC,CAAC,CAAC,CAAC;MAChD,IAAIO,UAAU,GAAGJ,MAAM,CAACK,MAAM,CAAC,EAAE,EAAER,MAAM,CAAC;MAE1CD,GAAG,IAAI,GAAG,GAAGG,aAAa,GAAG,GAAG,GAAGG,eAAe;MAClD,OAAOE,UAAU,CAACL,aAAa,CAAC;MAChC,IAAIC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACS,MAAM,GAAG,CAAC,EAAE;QAClC,KAAK,IAAI,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIR,MAAM,CAACS,OAAO,CAACL,UAAU,CAAC,EAAE;UACnDR,GAAG,IAAI,GAAG,GAAGW,GAAG,GAAG,GAAG,GAAGC,KAAK;;;;IAKpC,OAAO,IAAIjB,UAAU,CAAOmB,QAAa,IAAI;MAC3C,IAAI,CAAChB,IAAI,CAACC,GAAG,CAACC,GAAG,CAAC,CAACe,SAAS,CAAEC,IAAS,IAAI;QACzCF,QAAQ,CAACG,IAAI,CAACD,IAAI,CAAC;QACnBF,QAAQ,CAACI,QAAQ,EAAE;MACrB,CAAC,EACAC,KAAU,IAAI;QACXC,OAAO,CAACD,KAAK,CAACA,KAAK,CAACE,MAAM,CAAC;MAC/B,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAC,IAAI,CAACtB,GAAW,EAAEuB,IAAS;IACzBvB,GAAG,GAAG,IAAI,CAACE,SAAS,GAAGF,GAAG;IAC1B,OAAO,IAAIL,UAAU,CAAOmB,QAAQ,IAAI;MACtC,IAAI,CAAChB,IAAI,CAACwB,IAAI,CAACtB,GAAG,EAAEuB,IAAI,CAAC,CAACR,SAAS,CAAEC,IAAS,IAAI;QAChDF,QAAQ,CAACG,IAAI,CAACD,IAAI,CAAC;QACnBF,QAAQ,CAACI,QAAQ,EAAE;MACrB,CAAC,EACAC,KAAK,IAAI;QACRC,OAAO,CAACI,GAAG,CAACL,KAAK,CAACE,MAAM,CAAC;MAC3B,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AA7CWzB,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAA6B,SAAV7B,UAAU;EAAA8B,YAFT;AAAM","names":["Observable","ApiService","constructor","http","get","url","params","apiPrefix","firstParamKey","Object","keys","firstParamValue","values","copyParams","assign","length","key","value","entries","observer","subscribe","data","next","complete","error","console","status","post","body","log","factory","providedIn"],"sourceRoot":"","sources":["/home/dima/myProjects/heavyReviewBackEnd/web/ng2app/src/app/services/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  public apiPrefix: string = 'http://localhost:8000/'\n\n  constructor(private http: HttpClient) { }\n\n  get(url: string, params: any = null) {\n    url = this.apiPrefix + url\n\n    if (params) {\n      const firstParamKey = Object.keys(params)[0];\n      const firstParamValue = Object.values(params)[0]\n      let copyParams = Object.assign({}, params)\n\n      url += '?' + firstParamKey + '=' + firstParamValue\n      delete copyParams[firstParamKey]\n      if (Object.keys(params).length > 1) {        \n        for (let [key, value] of Object.entries(copyParams)) {\n          url += '&' + key + '=' + value\n        }        \n      }\n    }\n\n    return new Observable<any>((observer: any) => {\n      this.http.get(url).subscribe((data: any) => {\n        observer.next(data);\n        observer.complete()\n      },\n      (error: any) => {\n          console.error(error.status);\n      })\n    })\n  }\n\n  post(url: string, body: any) {\n    url = this.apiPrefix + url\n    return new Observable<any>((observer) => {\n      this.http.post(url, body).subscribe((data: any) => {\n        observer.next(data);\n        observer.complete()\n      },\n      (error) => {\n        console.log(error.status);\n      })\n    })\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}